import React, { useEffect, useRef } from 'react';
import * as echarts from 'echarts';

const VulnerabilityHeatmap = ({ data, currentFrame, colors }) => {
  const chartRef = useRef(null);
  const chartInstance = useRef(null);

  useEffect(() => {
    if (chartRef.current) {
      chartInstance.current = echarts.init(chartRef.current);
      
      return () => {
        if (chartInstance.current) {
          chartInstance.current.dispose();
        }
      };
    }
  }, []);

  useEffect(() => {
    if (chartInstance.current && data && data.length > 0) {
      updateHeatmap();
    }
  }, [data, currentFrame]);

  const updateHeatmap = () => {
    if (!data || data.length === 0) return;

    const uniqueDates = [...new Set(data.map(item => item.date))].sort();
    const currentDate = uniqueDates[currentFrame] || uniqueDates[0];
    const currentDateData = data.filter(item => item.date === currentDate);

    // Aggregate team data
    const teamAggregates = {};
    currentDateData.forEach(item => {
      if (!teamAggregates[item.team]) {
        teamAggregates[item.team] = {
          total_critical: 0,
          total_high: 0,
          total_medium: 0,
          total_low: 0
        };
      }
      teamAggregates[item.team].total_critical += item.critical_count;
      teamAggregates[item.team].total_high += item.high_count;
      teamAggregates[item.team].total_medium += item.medium_count || 0;
      teamAggregates[item.team].total_low += item.low_count || 0;
    });

    // Prepare data for heatmap
    const teams = Object.keys(teamAggregates).sort();
    const severityLevels = ['Critical', 'High', 'Medium', 'Low'];
    
    const heatmapData = [];
    teams.forEach((team, teamIndex) => {
      severityLevels.forEach((severity, severityIndex) => {
        let value = 0;
        switch(severity) {
          case 'Critical':
            value = teamAggregates[team].total_critical;
            break;
          case 'High':
            value = teamAggregates[team].total_high;
            break;
          case 'Medium':
            value = teamAggregates[team].total_medium;
            break;
          case 'Low':
            value = teamAggregates[team].total_low;
            break;
        }
        heatmapData.push([teamIndex, severityIndex, value]);
      });
    });

    // Calculate max value for color scaling
    const maxValue = Math.max(...heatmapData.map(item => item[2]));

    const option = {
      title: {
        text: 'ðŸ”¥ Vulnerability Heatmap by Team & Severity',
        subtext: currentDate,
        left: 'center',
        textStyle: {
          color: '#fff',
          fontSize: 16,
          fontWeight: 'bold'
        },
        subtextStyle: {
          color: '#bbb',
          fontSize: 11
        }
      },
      tooltip: {
        position: 'top',
        formatter: function(params) {
          const team = teams[params.data[0]];
          const severity = severityLevels[params.data[1]];
          const count = params.data[2];
          
          return `
            <div class="bg-gray-800 p-3 rounded-lg text-white">
              <div class="font-bold">${team} Team</div>
              <div class="text-sm mt-1">
                <div>${severity} Vulnerabilities: <span class="font-bold text-red-400">${count}</span></div>
              </div>
            </div>
          `;
        }
      },
      grid: {
        height: '60%',
        top: '30%',
        left: '20%',
        right: '15%',
        bottom: '25%'
      },
      xAxis: {
        type: 'category',
        data: teams,
        splitArea: {
          show: true,
          areaStyle: {
            color: ['rgba(50,50,50,0.1)', 'rgba(200,200,200,0.1)']
          }
        },
        axisLabel: {
          color: '#fff',
          fontSize: 12,
          interval: 0
        },
        axisLine: {
          lineStyle: {
            color: '#fff'
          }
        },
        axisTick: {
          show: false
        }
      },
      yAxis: {
        type: 'category',
        data: severityLevels,
        splitArea: {
          show: true,
          areaStyle: {
            color: ['rgba(50,50,50,0.1)', 'rgba(200,200,200,0.1)']
          }
        },
        axisLabel: {
          color: '#fff',
          fontSize: 12
        },
        axisLine: {
          lineStyle: {
            color: '#fff'
          }
        },
        axisTick: {
          show: false
        }
      },
      visualMap: {
        min: 0,
        max: maxValue,
        calculable: true,
        orient: 'horizontal',
        left: 'center',
        bottom: '2%',
        textStyle: {
          color: '#fff',
          fontSize: 10
        },
        itemHeight: 120,
        itemWidth: 15,
        inRange: {
          color: [
            '#0d47a1',  // Very low (dark blue)
            '#1976d2',  // Low (blue)
            '#2196f3',  // Medium low (light blue)
            '#81c784',  // Medium (light green)
            '#ffeb3b',  // Medium high (yellow)
            '#ff9800',  // High (orange)
            '#ff5722',  // Very high (red-orange)
            '#d32f2f'   // Critical (red)
          ]
        }
      },
      series: [{
        name: 'Vulnerabilities',
        type: 'heatmap',
        data: heatmapData,
        label: {
          show: true,
          color: '#fff',
          fontSize: 12,
          fontWeight: 'bold'
        },
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        },
        itemStyle: {
          borderRadius: 4,
          borderWidth: 1,
          borderColor: '#333'
        }
      }],
      backgroundColor: 'transparent',
      animation: true,
      animationDuration: 1000,
      animationEasing: 'cubicOut'
    };

    chartInstance.current.setOption(option, true);
  };

  return (
    <div className="w-full h-[500px] bg-gradient-to-br from-gray-800 via-gray-900 to-black rounded-lg p-4 backdrop-blur-sm border border-gray-700/50">
      <div
        ref={chartRef}
        className="w-full h-full"
        style={{ minHeight: '450px' }}
      />
    </div>
  );
};

export default VulnerabilityHeatmap;
